#    -*- mode: org -*-


Archived entries from file e:/ZballInstall/EZWinSoft/msys64/mingw64/home/github/kuangdash.github.io/blog/c-typedef.org


* typedef vs #define
:PROPERTIES:
:ARCHIVE_TIME: 2015-06-10 周三 15:26
:ARCHIVE_FILE: e:/ZballInstall/EZWinSoft/msys64/mingw64/home/github/kuangdash.github.io/blog/c-typedef.org
:ARCHIVE_CATEGORY: c-typedef
:END:
#define与typedef引申谈
1) #define宏定义有一个特别的长处：可以使用 #ifdef ,#ifndef等来进行逻辑判断，还可以使用#undef来取消定义。
2) typedef也有一个特别的长处：它符合范围规则，使用typedef定义的变量类型其作用范围限制在所定义的函数或者文件内（取决于此变量定义的位置），而宏定义则没有这种特性。
5. typedef & 复杂的变量声明
在编程实践中，尤其是看别人代码的时候，常常会遇到比较复杂的变量声明,使用typedef作简化自有其价值，比如：
下面是三个变量的声明，我想使用typdef分别给它们定义一个别名，请问该如何做？
#+BEGIN_SRC C
  /* 1. */ int *(*a[5])(int, char*);
  /* 2. */ void (*b[10]) (void (*)());
  /* 3. */ doube(*)() (*pa)[9];
#+END_SRC

答案与分析：
对复杂变量建立一个类型别名的方法很简单，你只要在传统的变量声明表达式里用类型名替代变量名，然后把关键字typedef加在该语句的开头就行了。
>1：int *(*a[5])(int, char*);
//pFun是我们建的一个类型别名
typedef int *(*pFun)(int, char*);
//使用定义的新类型来声明对象，等价于int* (*a[5])(int, char*);
pFun a[5];
>2：void (*b[10]) (void (*)());
//首先为上面表达式蓝色部分声明一个新类型
typedef void (*pFunParam)();
//整体声明一个新类型
typedef void (*pFun)(pFunParam);
//使用定义的新类型来声明对象，等价于void (*b[10]) (void (*)());
pFun b[10];
>3. double(*)()[1] (*pa)[9][2] ;
//首先为上面表达式蓝色部分声明一个新类型
typedef double(*pFun)();
//整体声明一个新类型
typedef pFun (*pFunParam)[9];
//使用定义的新类型来声明对象，等价于double(*)()(*pa)[9];
pFunParam pa;
pa是一个指针，指针指向一个数组，这个数组有9个元素，每一个元素都是“doube(*)()”--也即一个指针，指向一个函数，函数参数为空，返回值是“double”。
